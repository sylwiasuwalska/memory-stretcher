{"version":3,"sources":["components/RadioList.js","components/Options.js","components/Scores.js","components/Grid.js","components/App.js","serviceWorker.js","index.js"],"names":["RadioList","props","Form","onSubmit","handleFormSubmit","title","className","type","name","value","value1","onChange","handleChange","label1","value2","label2","value3","label3","Options","useState","show","setShow","handleClose","formSubmitEvent","preventDefault","onClick","Modal","onHide","centered","Header","closeButton","Title","Body","Container","Row","Col","changeEvent","setDisplayTime","target","setHowManyNodes","Math","floor","arraySize","Footer","Scores","win","lose","scores","correctlyClicked","howManyNodes","wronglyClicked","totalWins","totalDefeats","isWinning","isLosing","displayTime","Grid","gridSize","Array","sizeArray","nodes","setNodes","difficulty","isShowing","setIsShowing","setCorrectlyClicked","setWronglyClicked","setIsWinning","setIsLosing","clear","setClear","setTotalWins","setTotalDefeats","between","min","max","random","showingNodes","indicator","handleClick","event","nodeID","dataset","index","classList","add","useEffect","t","setTimeout","array","counterID","map","row","key","data-index","e","onAnimationEnd","remove","renderGrid","size","randomNodes","from","i","indexOfCurrentNode","getRandomNodes","console","log","timer","clearTimeout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a72f58f8.chunk.js","sourcesContent":["import React from \"react\";\nimport {Form} from \"react-bootstrap\";\n\nfunction RadioList(props) {\n\n\n    return (\n        <Form onSubmit={props.handleFormSubmit}>\n            <h5>{props.title}</h5>\n            <div className=\"form-check\">\n                <label>\n                    <input\n                        type=\"radio\"\n                        name={props.name}\n                        value={props.value1}\n                        onChange={props.handleChange}\n                        className=\"form-check-input\"\n                    />\n                    {props.label1}\n                </label>\n            </div>\n\n            <div className=\"form-check\">\n                <label>\n                    <input\n                        type=\"radio\"\n                        name={props.name}\n                        value={props.value2}\n                        onChange={props.handleChange}\n                        className=\"form-check-input\"\n                    />\n                    {props.label2}\n                </label>\n            </div>\n\n            <div className=\"form-check\">\n                <label>\n                    <input\n                        type=\"radio\"\n                        name={props.name}\n                        value={props.value3}\n                        onChange={props.handleChange}\n                        className=\"form-check-input\"\n                    />\n                    {props.label3}\n                </label>\n            </div>\n        </Form>\n    );\n}\n\nexport default RadioList;\n","import React, { Fragment, useState } from \"react\";\r\nimport { Button, Col, Container, Modal, Row } from \"react-bootstrap\";\r\nimport RadioList from \"./RadioList\";\r\n\r\nfunction Options(props) {\r\n  const [show, setShow] = useState(false);\r\n\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const handleTimeChange = (changeEvent) => {\r\n    props.setDisplayTime(changeEvent.target.value);\r\n  };\r\n\r\n  const handleDifficultyChange = (changeEvent) => {\r\n    props.setHowManyNodes(Math.floor(changeEvent.target.value*props.arraySize*props.arraySize));\r\n  };\r\n\r\n  const handleFormSubmit = (formSubmitEvent) => {\r\n    formSubmitEvent.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <button onClick={handleShow}>\r\n        OPTIONS\r\n      </button>\r\n\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Options</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Container>\r\n            <Row className=\"show-grid\">\r\n              <Col>\r\n                <RadioList\r\n                  title={\"Set display time:\"}\r\n                  handleChange={handleTimeChange}\r\n                  handleFormSubmit={handleFormSubmit}\r\n                  name={\"time\"}\r\n                  value1={\"1000\"}\r\n                  label1={\"1 sec\"}\r\n                  value2={\"2000\"}\r\n                  label2={\"2 sec\"}\r\n                  value3={\"3000\"}\r\n                  label3={\"3 sec\"}\r\n                />\r\n              </Col>\r\n\r\n              <Col>\r\n                <RadioList\r\n                  title={\"Set difficulty level:\"}\r\n                  handleChange={handleDifficultyChange}\r\n                  handleFormSubmit={handleFormSubmit}\r\n                  name={\"difficulty\"}\r\n                  value1={0.3}\r\n                  label1={\"easy\"}\r\n                  value2={0.5}\r\n                  label2={\"medium\"}\r\n                  value3={0.7}\r\n                  label3={\"hard\"}\r\n                />\r\n              </Col>\r\n            </Row>\r\n          </Container>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <button onClick={handleClose}>\r\n            SAVE\r\n          </button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Options;\r\n","import React from 'react';\r\n\r\n\r\nfunction Scores(props) {\r\n    const [correctlyClicked, howManyNodes, wronglyClicked, totalWins, totalDefeats, isWinning, isLosing, displayTime] = props.scores;\r\n\r\n    const displayScores = (win, lose) => {\r\n        if (win) {\r\n            return (\r\n                <div>\r\n                    <p className={`${win ? \"bouncing\" : \"\"}`}>success!</p>\r\n                    <p> start again.</p>\r\n                </div>\r\n            );\r\n        } else if (lose) {\r\n            return (\r\n                <div>\r\n                    <p>defeat!</p>\r\n                    <p> start again.</p>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <p>{`${displayTime/1000} sec - display time. `}</p>\r\n            <p>{`${howManyNodes - correctlyClicked} nodes remain to win. `}</p>\r\n            <p>{`${correctlyClicked} nodes exposed. `} </p>\r\n            <p>{`${wronglyClicked}  missed shots. `} </p>\r\n            <p>{`${3 - wronglyClicked} shots left. `}</p>\r\n            <p className=\"total\">{`total wins ${totalWins} : ${totalDefeats} total defeats `}</p>\r\n            {displayScores(isWinning, isLosing)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scores;","import React, { useEffect, useState } from \"react\";\r\nimport \"../styles/Grid.css\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport Options from \"./Options\";\r\nimport Scores from \"./Scores\";\r\n\r\nfunction Grid(props) {\r\n  const gridSize = [...Array(props.sizeArray)];\r\n  const [nodes, setNodes] = useState([]);\r\n  const [difficulty, setDifficulty] = useState(0.3);\r\n  const [howManyNodes, setHowManyNodes] = useState(\r\n    Math.floor(props.sizeArray * props.sizeArray * difficulty)\r\n  );\r\n\r\n  const [isShowing, setIsShowing] = useState(false);\r\n  const [correctlyClicked, setCorrectlyClicked] = useState(0);\r\n  const [wronglyClicked, setWronglyClicked] = useState(0);\r\n  const [isWinning, setIsWinning] = useState(false);\r\n  const [isLosing, setIsLosing] = useState(false);\r\n\r\n  const [clear, setClear] = useState(false);\r\n\r\n  const [totalWins, setTotalWins] = useState(0);\r\n  const [totalDefeats, setTotalDefeats] = useState(0);\r\n\r\n  const [displayTime, setDisplayTime] = useState(1000);\r\n\r\n  const between = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  const getRandomNodes = (size) => {\r\n    const randomNodes = Array.from(Array(size * size), () => 0);\r\n\r\n    for (let i = 1; i <= howManyNodes; i++) {\r\n      let indexOfCurrentNode = between(1, size * size) - 1;\r\n      while (randomNodes[indexOfCurrentNode] === 1) {\r\n        indexOfCurrentNode = between(1, size * size);\r\n      }\r\n      randomNodes[indexOfCurrentNode] = 1;\r\n    }\r\n    setNodes(randomNodes);\r\n  };\r\n\r\n  const showingNodes = (indicator, isShowing, isWinning) => {\r\n    if (isWinning) {\r\n      return \"winning\";\r\n    }\r\n    if (isLosing) {\r\n      return \"losing\";\r\n    }\r\n    if (isShowing) {\r\n      if (indicator === 1) {\r\n        return \"chosen\";\r\n      } else {\r\n        return \"\";\r\n      }\r\n    } else if (indicator === 2) {\r\n      return \"clicked\";\r\n    }\r\n  };\r\n\r\n  const renderGrid = (array, isShowing, clear) => {\r\n    let counterID = -1;\r\n    return array.map((row, index) => {\r\n      return (\r\n        <div key={index} className=\"grid-row\">\r\n          {array.map(() => {\r\n            counterID++;\r\n            return (\r\n              <div\r\n                key={counterID}\r\n                data-index={counterID}\r\n                className={\r\n                  clear\r\n                    ? `square`\r\n                    : `square ${showingNodes(\r\n                        nodes[counterID],\r\n                        isShowing,\r\n                        isWinning\r\n                      )}`\r\n                }\r\n                onClick={(e) => handleClick(e)}\r\n                onAnimationEnd={(e) => e.target.classList.remove(\"missed\")}\r\n              >\r\n                {/*{randomNodes[counterID]}*/}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  const startGame = () => {\r\n    getRandomNodes(props.sizeArray);\r\n    setClear(false);\r\n    setIsWinning(false);\r\n    setIsLosing(false);\r\n    setIsShowing(true);\r\n    setCorrectlyClicked(0);\r\n    setWronglyClicked(0);\r\n    console.log(displayTime);\r\n    console.log(difficulty);\r\n    console.log(howManyNodes);\r\n    const timer = setTimeout(() => {\r\n      setIsShowing(false);\r\n    }, displayTime);\r\n    return () => clearTimeout(timer);\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    if (isShowing || isWinning || isLosing) {\r\n      return;\r\n    }\r\n    let nodeID = event.target.dataset.index;\r\n    if (nodes[nodeID] === 1) {\r\n      nodes[nodeID] = 2;\r\n      setCorrectlyClicked(correctlyClicked + 1);\r\n    } else if (nodes[nodeID] === 2) {\r\n      event.target.classList.add(\"missed\");\r\n    } else {\r\n      event.target.classList.add(\"missed\");\r\n      setWronglyClicked(wronglyClicked + 1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (correctlyClicked === howManyNodes) {\r\n      setIsWinning(true);\r\n      setIsShowing(true);\r\n      setTotalWins((t) => t + 1);\r\n      setTimeout(() => {\r\n        return setClear(true);\r\n      }, 2000);\r\n    }\r\n  }, [wronglyClicked, correctlyClicked, howManyNodes]);\r\n\r\n  useEffect(() => {\r\n    if (wronglyClicked === 3) {\r\n      setIsLosing(true);\r\n      setTotalDefeats((t) => t + 1);\r\n      setTimeout(() => {\r\n        return setClear(true);\r\n      }, 1500);\r\n    }\r\n  }, [wronglyClicked, correctlyClicked, howManyNodes]);\r\n\r\n  return (\r\n    <Row>\r\n      <Col className={`grid-container ${isLosing ? \"missed\" : \"\"}`}>\r\n        {renderGrid(gridSize, isShowing, clear)}\r\n        <Row>\r\n          <Col>\r\n            <button onClick={startGame}>START</button>\r\n          </Col>\r\n          <Col>\r\n            <Options\r\n              setDisplayTime={setDisplayTime}\r\n              setHowManyNodes={setHowManyNodes}\r\n              arraySize={props.sizeArray}\r\n            />\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n      <Col className=\"scores\">\r\n        <Scores\r\n          scores={[\r\n            correctlyClicked,\r\n            howManyNodes,\r\n            wronglyClicked,\r\n            totalWins,\r\n            totalDefeats,\r\n            isWinning,\r\n            isLosing,\r\n            displayTime,\r\n          ]}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Grid;\r\n","import React from \"react\";\nimport Grid from \"./Grid\";\nimport \"../styles/App.css\";\nimport { Col, Container, Row } from \"react-bootstrap\";\n\nfunction App() {\n  return (\n    <Container className=\"App\">\n      <Row>\n        <Col>\n          <header>\n            <h1>memory stretcher</h1>\n            <h4>\n              Randomly chosen nodes are displayed for short amount of time.{\" \"}\n            </h4>\n            <h4>\n              Player's task is to memorize and find them all in a less than\n              three attempts.\n            </h4>\n          </header>\n        </Col>\n      </Row>\n\n      <Grid sizeArray={5} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}