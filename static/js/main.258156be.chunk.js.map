{"version":3,"sources":["components/Grid.js","components/App.js","serviceWorker.js","index.js"],"names":["Grid","props","gridSize","Array","sizeArray","useState","randomNodes","setRandomNodes","Math","floor","howManyNodes","isShowing","setIsShowing","correctlyClicked","setCorrectlyClicked","wronglyClicked","setWronglyClicked","isWinning","setIsWinning","isLosing","setIsLosing","clear","setClear","totalWins","setTotalWins","totalDefeats","setTotalDefeats","between","min","max","random","showingRandomNodes","indicator","handleClick","event","nodeID","target","getAttribute","classList","add","useEffect","t","setTimeout","Row","Col","className","array","counterID","map","row","index","key","data-index","onClick","e","renderGrid","size","from","i","indexOfCurrentNode","getRandomNodes","timer","clearTimeout","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.258156be.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"../styles/Grid.css\";\nimport { Col, Row } from \"react-bootstrap\";\n\nfunction Grid(props) {\n  const gridSize = [...Array(props.sizeArray)];\n  const [randomNodes, setRandomNodes] = useState([]);\n  const [howManyNodes, setHowManyNodes] = useState(\n    Math.floor(props.sizeArray * props.sizeArray * 0.35)\n  );\n\n  const [isShowing, setIsShowing] = useState(false);\n  const [correctlyClicked, setCorrectlyClicked] = useState(0);\n  const [wronglyClicked, setWronglyClicked] = useState(0);\n  const [isWinning, setIsWinning] = useState(false);\n  const [isLosing, setIsLosing] = useState(false);\n  const [clear, setClear] = useState(false);\n\n  const [totalWins, setTotalWins] = useState(0);\n  const [totalDefeats, setTotalDefeats] = useState(0);\n\n  const between = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const getRandomNodes = (size) => {\n    const randomNodes = Array.from(Array(size * size), () => 0);\n    for (let i = 1; i <= howManyNodes; i++) {\n      let indexOfCurrentNode = between(1, size * size) - 1;\n      while (randomNodes[indexOfCurrentNode] === 1) {\n        indexOfCurrentNode = between(1, size * size);\n      }\n      randomNodes[indexOfCurrentNode] = 1;\n    }\n    setRandomNodes(randomNodes);\n  };\n\n  const showingRandomNodes = (indicator, isShowing) => {\n    if (isShowing) {\n      if (indicator === 1) {\n        return \"chosen\";\n      } else {\n        return \"\";\n      }\n    } else {\n      return \"\";\n    }\n  };\n\n  const renderGrid = (array, isShowing, clear) => {\n    let counterID = -1;\n    return array.map((row, index) => {\n      return (\n        <div key={index} className=\"grid-row\">\n          {array.map(() => {\n            counterID++;\n            return (\n              <div\n                key={counterID}\n                data-index={counterID}\n                className={\n                  clear\n                    ? `square`\n                    : `square ${showingRandomNodes(\n                        randomNodes[counterID],\n                        isShowing\n                      )}`\n                }\n                onClick={(e) => handleClick(e)}\n              >\n                {/*{randomNodes[counterID]}*/}\n              </div>\n            );\n          })}\n        </div>\n      );\n    });\n  };\n\n  const startGame = () => {\n    getRandomNodes(props.sizeArray);\n    setClear(false);\n    setIsWinning(false);\n    setIsLosing(false);\n    setIsShowing(true);\n    setCorrectlyClicked(0);\n    setWronglyClicked(0);\n    const timer = setTimeout(() => {\n      setIsShowing(false);\n    }, 3000);\n    return () => clearTimeout(timer);\n  };\n\n  const handleClick = (event) => {\n    if (isShowing || isWinning || isLosing) {\n      return;\n    }\n    let nodeID = event.target.getAttribute(\"data-index\");\n    if (randomNodes[nodeID] === 1) {\n      randomNodes[nodeID] = 0;\n      setCorrectlyClicked(correctlyClicked + 1);\n      event.target.classList.add(\"clicked\");\n    } else {\n      event.target.classList.add(\"missed\");\n      setWronglyClicked(wronglyClicked + 1);\n    }\n  };\n\n  const displayScores = () => {\n    if (isWinning) {\n      return (\n        <div>\n          <p className={`${isWinning ? \"bouncing\" : \"\"}`}>success!</p>\n          <p> start again.</p>\n        </div>\n      );\n    } else if (isLosing) {\n      return (\n        <div>\n          <p>defeat!</p>\n          <p> start again.</p>\n        </div>\n      );\n    }\n  };\n\n  useEffect(() => {\n    if (correctlyClicked === howManyNodes) {\n      setIsWinning(true);\n      setIsShowing(true);\n      setTotalWins(t => t + 1);\n      setTimeout(() => {\n        setCorrectlyClicked(0);\n        return setClear(true);\n      }, 2000);\n    }\n  }, [wronglyClicked, correctlyClicked, howManyNodes]);\n\n  useEffect(() => {\n    if (wronglyClicked === 3) {\n      setIsLosing(true);\n      setTotalDefeats(t => t + 1);\n      setTimeout(() => {\n        setCorrectlyClicked(0);\n        return setClear(true);\n      }, 100);\n    }\n  }, [wronglyClicked, correctlyClicked, howManyNodes]);\n\n  return (\n    <Row>\n      <Col className=\"grid-container\">\n        {renderGrid(gridSize, isShowing, clear)}\n        <button onClick={startGame}>START</button>\n      </Col>\n      <Col className=\"scores\">\n        <p>{`${correctlyClicked} nodes exposed. `} </p>\n        <p>{`${howManyNodes - correctlyClicked} nodes remain to win. `}</p>\n        <p>{`${wronglyClicked}  missed shots. `} </p>\n        <p>{`${3 - wronglyClicked} shots left. `}</p>\n        <p className=\"total\">{`total wins ${totalWins} : ${totalDefeats} total defeats `}</p>\n        {displayScores()}\n      </Col>\n    </Row>\n  );\n}\n\nexport default Grid;\n","import React from \"react\";\nimport Grid from \"./Grid\";\nimport \"../styles/App.css\";\nimport { Col, Container, Row } from \"react-bootstrap\";\n\nfunction App() {\n  return (\n    <Container className=\"App\">\n      <Row>\n        <Col>\n          <header>\n            <h1>memory stretcher</h1>\n            <h4>\n              Randomly chosen nodes are displayed for short amount of time.{\" \"}\n            </h4>\n            <h4>\n              Player's task is to memorized them and find them all in less than\n              three attempts.\n            </h4>\n          </header>\n        </Col>\n      </Row>\n\n      <Grid sizeArray={5} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}