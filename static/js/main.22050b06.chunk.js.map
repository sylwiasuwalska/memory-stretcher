{"version":3,"sources":["components/Scores.js","components/Grid.js","components/App.js","serviceWorker.js","index.js"],"names":["Scores","props","win","lose","scores","correctlyClicked","howManyNodes","wronglyClicked","totalWins","totalDefeats","isWinning","isLosing","className","Grid","gridSize","Array","sizeArray","useState","randomNodes","setRandomNodes","Math","floor","isShowing","setIsShowing","setCorrectlyClicked","setWronglyClicked","setIsWinning","setIsLosing","clear","setClear","setTotalWins","setTotalDefeats","between","min","max","random","showingNodes","indicator","handleClick","event","nodeID","target","getAttribute","classList","add","useEffect","t","setTimeout","Row","Col","array","counterID","map","row","index","key","data-index","onClick","e","onAnimationEnd","remove","renderGrid","size","from","i","indexOfCurrentNode","getRandomNodes","timer","clearTimeout","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TAoCeA,MAjCf,SAAgBC,GAAQ,IAGGC,EAAKC,EAHT,cACoFF,EAAMG,OAD1F,GACZC,EADY,KACMC,EADN,KACoBC,EADpB,KACoCC,EADpC,KAC+CC,EAD/C,KAC6DC,EAD7D,KACwEC,EADxE,KAqBnB,OACI,6BACI,qCAAON,EAAP,yBACA,qCAAOC,EAAeD,EAAtB,2BACA,qCAAOE,EAAP,yBACA,qCAAO,EAAIA,EAAX,kBACA,uBAAGK,UAAU,SAAb,qBAAoCJ,EAApC,cAAmDC,EAAnD,qBAxBoBN,EAyBMQ,GAzBXT,EAyBAQ,GAtBX,6BACI,uBAAGE,UAAS,UAAKV,EAAM,WAAa,KAApC,YACA,6CAGDC,EAEH,6BACI,sCACA,kDAJL,KCoJAU,MA7Jf,SAAcZ,GACZ,IAAMa,EAAQ,YAAOC,MAAMd,EAAMe,YADd,EAEmBC,mBAAS,IAF5B,mBAEZC,EAFY,KAECC,EAFD,OAGqBF,mBACtCG,KAAKC,MAAMpB,EAAMe,UAAYf,EAAMe,UAAY,MAJ9B,mBAGZV,EAHY,aAOeW,oBAAS,IAPxB,mBAOZK,EAPY,KAODC,EAPC,OAQ6BN,mBAAS,GARtC,mBAQZZ,EARY,KAQMmB,EARN,OASyBP,mBAAS,GATlC,mBASZV,EATY,KASIkB,EATJ,OAUeR,oBAAS,GAVxB,mBAUZP,EAVY,KAUDgB,EAVC,OAWaT,oBAAS,GAXtB,mBAWZN,EAXY,KAWFgB,EAXE,OAaOV,oBAAS,GAbhB,mBAaZW,EAbY,KAaLC,EAbK,OAeeZ,mBAAS,GAfxB,mBAeZT,EAfY,KAeDsB,EAfC,OAgBqBb,mBAAS,GAhB9B,mBAgBZR,EAhBY,KAgBEsB,EAhBF,KAkBbC,EAAU,SAACC,EAAKC,GACpB,OAAOd,KAAKC,MAAMD,KAAKe,UAAYD,EAAMD,EAAM,GAAKA,IAehDG,EAAe,SAACC,EAAWf,EAAWZ,GAC1C,OAAIA,EACK,UAELC,EACK,SAELW,EACgB,IAAde,EACK,SAEA,GAEc,IAAdA,EACF,eADF,GAkDHC,EAAc,SAACC,GACnB,KAAIjB,GAAaZ,GAAaC,GAA9B,CAGA,IAAI6B,EAASD,EAAME,OAAOC,aAAa,cACX,IAAxBxB,EAAYsB,IACdtB,EAAYsB,GAAU,EACtBhB,EAAoBnB,EAAmB,IACN,IAAxBa,EAAYsB,GACrBD,EAAME,OAAOE,UAAUC,IAAI,WAE3BL,EAAME,OAAOE,UAAUC,IAAI,UAC3BnB,EAAkBlB,EAAiB,MAyBvC,OArBAsC,qBAAU,WACJxC,IAAqBC,IACvBoB,GAAa,GACbH,GAAa,GACbO,GAAa,SAACgB,GAAD,OAAOA,EAAI,KACxBC,YAAW,WACT,OAAOlB,GAAS,KACf,QAEJ,CAACtB,EAAgBF,EAAkBC,IAEtCuC,qBAAU,WACe,IAAnBtC,IACFoB,GAAY,GACZI,GAAgB,SAACe,GAAD,OAAOA,EAAI,KAC3BC,YAAW,WACT,OAAOlB,GAAS,KACf,SAEJ,CAACtB,EAAgBF,EAAkBC,IAGpC,kBAAC0C,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKrC,UAAS,yBAAoBD,EAAW,SAAW,KApFzC,SAACuC,EAAO5B,EAAWM,GACpC,IAAIuB,GAAa,EACjB,OAAOD,EAAME,KAAI,SAACC,EAAKC,GACrB,OACE,yBAAKC,IAAKD,EAAO1C,UAAU,YACxBsC,EAAME,KAAI,WAET,OADAD,IAEE,yBACEI,IAAKJ,EACLK,aAAYL,EACZvC,UACEgB,EAAK,0BAESQ,EACRlB,EAAYiC,GACZ7B,EAAWZ,IAGnB+C,QAAS,SAACC,GAAD,OAAOpB,EAAYoB,IAC5BC,eAAgB,SAACD,GAAD,OAAOA,EAAEjB,OAAOE,UAAUiB,OAAO,oBAiExDC,CAAW/C,EAAUQ,EAAWM,GACjC,4BAAQ6B,QAvDI,YA7DK,SAACK,GAEtB,IADA,IAAM5C,EAAcH,MAAMgD,KAAKhD,MAAM+C,EAAOA,IAAO,kBAAM,KAChDE,EAAI,EAAGA,GAAK1D,EAAc0D,IAAK,CAEtC,IADA,IAAIC,EAAqBjC,EAAQ,EAAG8B,EAAOA,GAAQ,EACR,IAApC5C,EAAY+C,IACjBA,EAAqBjC,EAAQ,EAAG8B,EAAOA,GAEzC5C,EAAY+C,GAAsB,EAEpC9C,EAAeD,GAqDfgD,CAAejE,EAAMe,WACrBa,GAAS,GACTH,GAAa,GACbC,GAAY,GACZJ,GAAa,GACbC,EAAoB,GACpBC,EAAkB,GAClB,IAAM0C,EAAQpB,YAAW,WACvBxB,GAAa,KACZ,KACH,OAAO,kBAAM6C,aAAaD,MA4CtB,UAEF,kBAAClB,EAAA,EAAD,CAAKrC,UAAU,UACb,kBAAC,EAAD,CACER,OAAQ,CACNC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,Q,gBC9HG0D,MAvBf,WACE,OACE,kBAACC,EAAA,EAAD,CAAW1D,UAAU,OACnB,kBAACoC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,gCACE,gDACA,4FACgE,KAEhE,gHAQN,kBAAC,EAAD,CAAMjC,UAAW,MCXHuD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.22050b06.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nfunction Scores(props) {\r\n    const [correctlyClicked, howManyNodes, wronglyClicked, totalWins, totalDefeats, isWinning, isLosing] = props.scores;\r\n\r\n    const displayScores = (win, lose) => {\r\n        if (win) {\r\n            return (\r\n                <div>\r\n                    <p className={`${win ? \"bouncing\" : \"\"}`}>success!</p>\r\n                    <p> start again.</p>\r\n                </div>\r\n            );\r\n        } else if (lose) {\r\n            return (\r\n                <div>\r\n                    <p>defeat!</p>\r\n                    <p> start again.</p>\r\n                </div>\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <p>{`${correctlyClicked} nodes exposed. `} </p>\r\n            <p>{`${howManyNodes - correctlyClicked} nodes remain to win. `}</p>\r\n            <p>{`${wronglyClicked}  missed shots. `} </p>\r\n            <p>{`${3 - wronglyClicked} shots left. `}</p>\r\n            <p className=\"total\">{`total wins ${totalWins} : ${totalDefeats} total defeats `}</p>\r\n            {displayScores(isWinning, isLosing)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scores;","import React, { useEffect, useState } from \"react\";\r\nimport \"../styles/Grid.css\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport Scores from \"./Scores\";\r\n\r\nfunction Grid(props) {\r\n  const gridSize = [...Array(props.sizeArray)];\r\n  const [randomNodes, setRandomNodes] = useState([]);\r\n  const [howManyNodes, setHowManyNodes] = useState(\r\n    Math.floor(props.sizeArray * props.sizeArray * 0.35)\r\n  );\r\n\r\n  const [isShowing, setIsShowing] = useState(false);\r\n  const [correctlyClicked, setCorrectlyClicked] = useState(0);\r\n  const [wronglyClicked, setWronglyClicked] = useState(0);\r\n  const [isWinning, setIsWinning] = useState(false);\r\n  const [isLosing, setIsLosing] = useState(false);\r\n\r\n  const [clear, setClear] = useState(false);\r\n\r\n  const [totalWins, setTotalWins] = useState(0);\r\n  const [totalDefeats, setTotalDefeats] = useState(0);\r\n\r\n  const between = (min, max) => {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n  };\r\n\r\n  const getRandomNodes = (size) => {\r\n    const randomNodes = Array.from(Array(size * size), () => 0);\r\n    for (let i = 1; i <= howManyNodes; i++) {\r\n      let indexOfCurrentNode = between(1, size * size) - 1;\r\n      while (randomNodes[indexOfCurrentNode] === 1) {\r\n        indexOfCurrentNode = between(1, size * size);\r\n      }\r\n      randomNodes[indexOfCurrentNode] = 1;\r\n    }\r\n    setRandomNodes(randomNodes);\r\n  };\r\n\r\n  const showingNodes = (indicator, isShowing, isWinning) => {\r\n    if (isWinning) {\r\n      return \"winning\"\r\n    }\r\n    if (isLosing) {\r\n      return \"losing\"\r\n    }\r\n    if (isShowing) {\r\n      if (indicator === 1) {\r\n        return \"chosen\";\r\n      } else {\r\n        return \"\";\r\n      }\r\n    } else if (indicator === 2) {\r\n      return \"clicked\";\r\n    }\r\n  };\r\n\r\n  const renderGrid = (array, isShowing, clear) => {\r\n    let counterID = -1;\r\n    return array.map((row, index) => {\r\n      return (\r\n        <div key={index} className=\"grid-row\">\r\n          {array.map(() => {\r\n            counterID++;\r\n            return (\r\n              <div\r\n                key={counterID}\r\n                data-index={counterID}\r\n                className={\r\n                  clear\r\n                    ? `square`\r\n                    : `square ${showingNodes(\r\n                        randomNodes[counterID],\r\n                        isShowing, isWinning\r\n                      )}`\r\n                }\r\n                onClick={(e) => handleClick(e)}\r\n                onAnimationEnd={(e) => e.target.classList.remove(\"missed\")}\r\n              >\r\n                {/*{randomNodes[counterID]}*/}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  const startGame = () => {\r\n    getRandomNodes(props.sizeArray);\r\n    setClear(false);\r\n    setIsWinning(false);\r\n    setIsLosing(false);\r\n    setIsShowing(true);\r\n    setCorrectlyClicked(0);\r\n    setWronglyClicked(0);\r\n    const timer = setTimeout(() => {\r\n      setIsShowing(false);\r\n    }, 3000);\r\n    return () => clearTimeout(timer);\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    if (isShowing || isWinning || isLosing) {\r\n      return;\r\n    }\r\n    let nodeID = event.target.getAttribute(\"data-index\");\r\n    if (randomNodes[nodeID] === 1) {\r\n      randomNodes[nodeID] = 2;\r\n      setCorrectlyClicked(correctlyClicked + 1);\r\n    } else if (randomNodes[nodeID] === 2) {\r\n      event.target.classList.add(\"missed\");\r\n    } else {\r\n      event.target.classList.add(\"missed\");\r\n      setWronglyClicked(wronglyClicked + 1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (correctlyClicked === howManyNodes) {\r\n      setIsWinning(true);\r\n      setIsShowing(true);\r\n      setTotalWins((t) => t + 1);\r\n      setTimeout(() => {\r\n        return setClear(true);\r\n      }, 2000);\r\n    }\r\n  }, [wronglyClicked, correctlyClicked, howManyNodes]);\r\n\r\n  useEffect(() => {\r\n    if (wronglyClicked === 3) {\r\n      setIsLosing(true);\r\n      setTotalDefeats((t) => t + 1);\r\n      setTimeout(() => {\r\n        return setClear(true);\r\n      }, 1500);\r\n    }\r\n  }, [wronglyClicked, correctlyClicked, howManyNodes]);\r\n\r\n  return (\r\n    <Row>\r\n      <Col className={`grid-container ${isLosing ? \"missed\" : \"\"}`}>\r\n        {renderGrid(gridSize, isShowing, clear)}\r\n        <button onClick={startGame}>START</button>\r\n      </Col>\r\n      <Col className=\"scores\">\r\n        <Scores\r\n          scores={[\r\n            correctlyClicked,\r\n            howManyNodes,\r\n            wronglyClicked,\r\n            totalWins,\r\n            totalDefeats,\r\n            isWinning,\r\n            isLosing,\r\n          ]}\r\n        />\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Grid;\r\n","import React from \"react\";\nimport Grid from \"./Grid\";\nimport \"../styles/App.css\";\nimport { Col, Container, Row } from \"react-bootstrap\";\n\nfunction App() {\n  return (\n    <Container className=\"App\">\n      <Row>\n        <Col>\n          <header>\n            <h1>memory stretcher</h1>\n            <h4>\n              Randomly chosen nodes are displayed for short amount of time.{\" \"}\n            </h4>\n            <h4>\n              Player's task is to memorize and find them all in a less than\n              three attempts.\n            </h4>\n          </header>\n        </Col>\n      </Row>\n\n      <Grid sizeArray={5} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}